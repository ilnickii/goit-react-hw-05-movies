{"version":3,"file":"static/js/887.e300bf56.chunk.js","mappings":"6OAgBA,EAZiB,SAAHA,GAA2C,IAArCC,EAASD,EAATC,UAAWC,EAAIF,EAAJE,KAAMC,EAAYH,EAAZG,aAC7BC,EAAWD,EAAY,GAAAE,OAHV,mCAG4BA,OAAGF,GAAiB,GAEnE,OACEG,EAAAA,EAAAA,MAAA,MAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,OAAKC,IAAKL,EAAUM,IAAI,MACxBJ,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,iBAAeL,MAClBI,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,cAAYN,OAGrB,E,kBCsDA,EA/Da,WACX,IAAQU,GAAOC,EAAAA,EAAAA,MAAPD,GAERE,GAAgCC,EAAAA,EAAAA,UAAS,MAAKC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAvCI,EAAQF,EAAA,GAAEG,EAAWH,EAAA,GAC5BI,GAAkCL,EAAAA,EAAAA,WAAS,GAAMM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA1CE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAC9BG,GAAgCT,EAAAA,EAAAA,WAAS,GAAMU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAAxCE,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GAC5BG,GAAwCb,EAAAA,EAAAA,UACtC,yCACDc,GAAAZ,EAAAA,EAAAA,GAAAW,EAAA,GAFME,EAAYD,EAAA,GAAEE,EAAeF,EAAA,GAsBpC,OAlBAG,EAAAA,EAAAA,YAAU,WAEoB,SAAAC,IAY3B,OAZ2BA,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAA5B,SAAAC,IAAA,IAAAC,EAAA,OAAAF,IAAAA,MAAA,SAAAG,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEuB,OAFvBF,EAAAC,KAAA,EAEIhB,GAAa,GAAMe,EAAAE,KAAA,GACAC,EAAAA,EAAAA,IAAQ7B,GAAI,KAAD,EAAxByB,EAAIC,EAAAI,KAEVvB,EAAYkB,GAAMC,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAK,GAAAL,EAAA,SAElBX,GAAY,GACZI,EAAgBO,EAAAK,GAAMC,SAAS,QAEX,OAFWN,EAAAC,KAAA,GAE/BhB,GAAa,GAAOe,EAAAO,OAAA,6BAAAP,EAAAQ,OAAA,GAAAV,EAAA,yBAEvBW,MAAA,KAAAC,UAAA,CAbIpC,GAAW,WACYqB,EAAAc,MAAC,KAADC,UAAA,CAa5BC,EACF,GAAG,CAACrC,KAGFL,EAAAA,EAAAA,MAAA,OAAAC,SAAA,CACGkB,IACCjB,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAAA,KAAAD,SAAIsB,MAGPR,IACCb,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,iBAGO,OAAbU,IACCT,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,wBAGNU,GAAYA,EAASgC,OAAS,IAC7BzC,EAAAA,EAAAA,KAAA,MAAAD,SACGU,EAASiC,KAAI,SAAAC,GACZ,OACE3C,EAAAA,EAAAA,KAAC4C,EAAQ,CAEPnD,UAAWkD,EAAMlD,UACjBC,KAAMiD,EAAMjD,KACZC,aAAcgD,EAAMhD,cAHfgD,EAAMxC,GAMjB,QAKV,C","sources":["components/CastItem/CastItem.jsx","components/Cast/Cast.jsx"],"sourcesContent":["import React from 'react';\n\nconst baseImageUrl = 'https://image.tmdb.org/t/p/w200';\n\nconst CastItem = ({ character, name, profile_path }) => {\n  const imageUrl = profile_path ? `${baseImageUrl}${profile_path}` : '';\n\n  return (\n    <li>\n      <img src={imageUrl} alt=\"\" />\n      <p>Actor's name: {name}</p>\n      <p>Character: {character}</p>\n    </li>\n  );\n};\n\nexport default CastItem;","import CastItem from '../CastItem/CastItem';\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getCast } from '../../services/getTrendingMovies';\n\nconst Cast = () => {\n  const { id } = useParams();\n\n  const [castData, setCastData] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasError, setHasError] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\n    'Something went wrong! Try again later'\n  );\n\n  useEffect(() => {\n    if (!id) return;\n    async function fetchCastData() {\n      try {\n        setIsLoading(true);\n        const cast = await getCast(id);\n\n        setCastData(cast);\n      } catch (error) {\n        setHasError(true);\n        setErrorMessage(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    fetchCastData();\n  }, [id]);\n\n  return (\n    <div>\n      {hasError && (\n        <div>\n          <p>{errorMessage}</p>\n        </div>\n      )}\n      {isLoading && (\n        <div>\n          <p>Loading...</p>\n        </div>\n      )}\n      {castData === null && (\n        <div>\n          <p>No cast available</p>\n        </div>\n      )}\n      {castData && castData.length > 0 && (\n        <ul>\n          {castData.map(actor => {\n            return (\n              <CastItem\n                key={actor.id}\n                character={actor.character}\n                name={actor.name}\n                profile_path={actor.profile_path}\n              />\n            );\n          })}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport default Cast;"],"names":["_ref","character","name","profile_path","imageUrl","concat","_jsxs","children","_jsx","src","alt","id","useParams","_useState","useState","_useState2","_slicedToArray","castData","setCastData","_useState3","_useState4","isLoading","setIsLoading","_useState5","_useState6","hasError","setHasError","_useState7","_useState8","errorMessage","setErrorMessage","useEffect","_fetchCastData","_asyncToGenerator","_regeneratorRuntime","_callee","cast","_context","prev","next","getCast","sent","t0","message","finish","stop","apply","arguments","fetchCastData","length","map","actor","CastItem"],"sourceRoot":""}
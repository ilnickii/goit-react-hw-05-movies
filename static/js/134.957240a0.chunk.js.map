{"version":3,"file":"static/js/134.957240a0.chunk.js","mappings":"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","sources":["components/MovieList/MovieList.jsx","pages/Movies.jsx","services/getTrendingMovies.jsx"],"sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst MovieList = ({ movies }) => {\n  return (\n    <ul>\n      {movies.map(movie => (\n        <li key={movie.id}>\n          <Link to={`/movies/${movie.id}`}>{movie.title}</Link>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default MovieList;","import MovieList from '../components/MovieList/MovieList';\nimport React, { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { getMovieSearch } from '../services/getTrendingMovies';\n\nconst Movies = () => {\n    const [searchParams, setSearchParams] = useSearchParams();\n    const [MovieSearch, setMovieSearch] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState(false);\n    const [errorMessage, setErrorMessage] = useState(\n        'Something went wrong! Try again later'\n    );\n\n    const query = searchParams.get('query');\n\n    useEffect(() => {\n        if (!query) return;\n        async function fetchMovieSearch() {\n            try {\n                setIsLoading(true);\n                const mSearch = await getMovieSearch(query);\n                setMovieSearch(mSearch);\n            } catch (error) {\n                setError(true);\n                setErrorMessage(error.message);\n            } finally {\n                setIsLoading(false);\n            }\n        }\n        fetchMovieSearch();\n        \n    }, [query]);\n\n    const handleSubmit = e => {\n        e.preventDefault();\n        const searchValue = e.currentTarget.elements.searchMovie.value;\n        setSearchParams({ query: searchValue });\n    };\n\n    return (\n        <>\n            <form onSubmit={handleSubmit}>\n                <label>\n                    <input\n                        name=\"searchMovie\"\n                        type=\"text\"\n                        autoComplete=\"off\"\n                        autoFocus\n                        placeholder=\"Search movies...\"\n                        required\n                    />\n                </label>\n                <button type=\"submit\">Search</button>\n            </form>\n            <section>\n                {error && (\n                    <div>\n                        <p>{errorMessage}</p>\n                    </div>\n                )}\n                {isLoading && (\n                    <div>\n                        <p>Loading...</p>\n                    </div>\n                )}\n                <ul>\n                    {MovieSearch !== 0 &&\n                         <MovieList movies={MovieSearch} />}\n                </ul>\n            </section>\n        </>\n    );\n};\n\nexport default Movies;","import axios from \"axios\";\n\nconst token = 'eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJmYTY1NjY4NTgxZDM2MDViNjI3YmJkNTA1M2MwZjc4YiIsInN1YiI6IjY1NjFmM2QyN2RmZGE2NTkzMTc0NGM4MSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.mJ_NpdJlCksB6aHfkEKZ1GCpPJcq2S1fKYHXkm3OMn0';\n\nconst authAxios = axios.create({\n  headers: {\n    Authorization: `Bearer ${token}`,\n  },\n});\n\nexport const getTrendingMovies = async () => {\n  const { data } = await authAxios.get(\n    'https://api.themoviedb.org/3/trending/movie/day?language=en-US'\n  );\n\n  return data;\n};\n\nexport const getMovie = async movieId => {\n  const { data } = await authAxios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}`\n  );\n\n  return data;\n};\n\nexport const getCast = async movieId => {\n  const { data } = await authAxios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}/credits`\n  );\n  return data.cast;\n};\n\nexport const getReview = async movieId => {\n  const { data } = await authAxios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}/reviews`\n  );\n\n  return data.results;\n};\n\nexport const getMovieSearch = async movieName => {\n  const { data } = await authAxios.get(\n    `https://api.themoviedb.org/3/search/movie?query=${movieName}`\n  );\n\n  return data.results;\n};\n"],"names":["_ref","movies","_jsx","children","map","movie","Link","to","concat","id","title","_useSearchParams","useSearchParams","_useSearchParams2","_slicedToArray","searchParams","setSearchParams","_useState","useState","_useState2","MovieSearch","setMovieSearch","_useState3","_useState4","isLoading","setIsLoading","_useState5","_useState6","error","setError","_useState7","_useState8","errorMessage","setErrorMessage","query","get","useEffect","_fetchMovieSearch","_asyncToGenerator","_regeneratorRuntime","_callee","mSearch","_context","prev","next","getMovieSearch","sent","t0","message","finish","stop","apply","arguments","fetchMovieSearch","_jsxs","_Fragment","onSubmit","e","preventDefault","searchValue","currentTarget","elements","searchMovie","value","name","type","autoComplete","autoFocus","placeholder","required","MovieList","authAxios","axios","headers","Authorization","getTrendingMovies","_yield$authAxios$get","data","abrupt","getMovie","_ref2","_callee2","movieId","_yield$authAxios$get2","_context2","_x","getCast","_ref3","_callee3","_yield$authAxios$get3","_context3","cast","_x2","getReview","_ref4","_callee4","_yield$authAxios$get4","_context4","results","_x3","_ref5","_callee5","movieName","_yield$authAxios$get5","_context5","_x4"],"sourceRoot":""}